AWSTemplateFormatVersion: '2010-09-09'
Description: Joshi Assignment - AWS ECS Fargate Deployment with CI/CD and Monitoring

Parameters:
  GitHubOwner:
    Type: String
    Description: Your GitHub username
  GitHubRepo:
    Type: String
    Default: todo-app
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch name
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token (store in AWS Secrets Manager or provide manually)

Resources:
  joshiVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: joshi-vpc

  joshiPublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - joshiVPC
    Properties:
      VpcId: !Ref joshiVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ca-central-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: joshi-public-subnet-1

  joshiPublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - joshiVPC
    Properties:
      VpcId: !Ref joshiVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ca-central-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: joshi-public-subnet-2

  joshiPrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - joshiVPC
    Properties:
      VpcId: !Ref joshiVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ca-central-1a
      Tags:
        - Key: Name
          Value: joshi-private-subnet-1

  joshiPrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - joshiVPC
    Properties:
      VpcId: !Ref joshiVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: ca-central-1b
      Tags:
        - Key: Name
          Value: joshi-private-subnet-2

  joshiInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: joshi-igw

  joshiVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - joshiVPC
      - joshiInternetGateway
    Properties:
      VpcId: !Ref joshiVPC
      InternetGatewayId: !Ref joshiInternetGateway

  joshiPublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - joshiVPC
    Properties:
      VpcId: !Ref joshiVPC
      Tags:
        - Key: Name
          Value: joshi-public-rt

  joshiPublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - joshiPublicRouteTable
      - joshiVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref joshiPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref joshiInternetGateway

  joshiPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - joshiPublicSubnet1
      - joshiPublicRouteTable
    Properties:
      SubnetId: !Ref joshiPublicSubnet1
      RouteTableId: !Ref joshiPublicRouteTable

  joshiPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - joshiPublicSubnet2
      - joshiPublicRouteTable
    Properties:
      SubnetId: !Ref joshiPublicSubnet2
      RouteTableId: !Ref joshiPublicRouteTable

  joshiPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - joshiVPC
    Properties:
      VpcId: !Ref joshiVPC
      Tags:
        - Key: Name
          Value: joshi-private-rt

  joshiNATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  joshiNATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - joshiNATGatewayEIP
      - joshiPublicSubnet1
    Properties:
      AllocationId: !GetAtt joshiNATGatewayEIP.AllocationId
      SubnetId: !Ref joshiPublicSubnet1
      Tags:
        - Key: Name
          Value: joshi-nat

  joshiPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - joshiPrivateRouteTable
      - joshiNATGateway
    Properties:
      RouteTableId: !Ref joshiPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref joshiNATGateway

  joshiPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - joshiPrivateSubnet1
      - joshiPrivateRouteTable
    Properties:
      SubnetId: !Ref joshiPrivateSubnet1
      RouteTableId: !Ref joshiPrivateRouteTable

  joshiPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - joshiPrivateSubnet2
      - joshiPrivateRouteTable
    Properties:
      SubnetId: !Ref joshiPrivateSubnet2
      RouteTableId: !Ref joshiPrivateRouteTable

  # --- Security Groups ---
  joshiALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - joshiVPC
    Properties:
      GroupDescription: Security group for joshi ALB
      VpcId: !Ref joshiVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: joshi-alb-sg

  joshiECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - joshiVPC
      - joshiALBSecurityGroup
    Properties:
      GroupDescription: Security group for joshi ECS tasks
      VpcId: !Ref joshiVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref joshiALBSecurityGroup
      Tags:
        - Key: Name
          Value: joshi-ecs-sg

  # --- Application Load Balancer ---
  joshiLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - joshiPublicSubnet1
      - joshiPublicSubnet2
      - joshiALBSecurityGroup
    Properties:
      Name: joshi-alb
      Subnets:
        - !Ref joshiPublicSubnet1
        - !Ref joshiPublicSubnet2
      SecurityGroups:
        - !Ref joshiALBSecurityGroup
      Scheme: internet-facing
      Type: application

  joshiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - joshiVPC
    Properties:
      Name: joshi-tg
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref joshiVPC
      TargetType: ip
      HealthCheckPath: /

  joshiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - joshiLoadBalancer
      - joshiTargetGroup
    Properties:
      LoadBalancerArn: !Ref joshiLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref joshiTargetGroup

  # --- ECS Cluster ---
  joshiECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: joshi-ecs-cluster

  # --- CloudWatch Log Group for ECS Tasks ---
  joshiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/joshi-todo-app
      RetentionInDays: 7

  # --- ECS Task Definition ---
  joshiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - joshiTaskExecutionRole
      - joshiLogGroup
    Properties:
      Family: joshi-todo-app-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt joshiTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: todo-app
          Image: 727646477053.dkr.ecr.ca-central-1.amazonaws.com/joshi-todo-app:latest
          PortMappings:
            - ContainerPort: 3000
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref joshiLogGroup
              awslogs-region: ca-central-1
              awslogs-stream-prefix: todo-app

  joshiTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # --- ECS Service ---
  joshiECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - joshiECSCluster
      - joshiTaskDefinition
      - joshiECSSecurityGroup
      - joshiListener
    Properties:
      Cluster: !Ref joshiECSCluster
      ServiceName: joshi-ecs-service
      TaskDefinition: !Ref joshiTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref joshiPrivateSubnet1
            - !Ref joshiPrivateSubnet2
          SecurityGroups:
            - !Ref joshiECSSecurityGroup
      LoadBalancers:
        - ContainerName: todo-app
          ContainerPort: 3000
          TargetGroupArn: !Ref joshiTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100

  # --- CodeBuild Role ---
  joshiCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: joshiCodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                  - logs:*
                  - s3:*
                Resource: '*'

  # --- CodeBuild Project ---
  joshiCodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - joshiCodeBuildRole
    Properties:
      Name: joshi-codebuild
      ServiceRole: !GetAtt joshiCodeBuildRole.Arn
      Artifacts:
        Type: S3
        Location: !Sub joshi-codepipeline-artifacts-${AWS::AccountId}
        Name: BuildArtifact
        NamespaceType: NONE
        Packaging: ZIP
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: ca-central-1
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: joshi-todo-app
          - Name: IMAGE_TAG
            Value: latest
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/${GitHubOwner}/${GitHubRepo}.git
        BuildSpec: buildspec.yml

  # --- CodePipeline Role ---
  joshiCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: joshiCodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:*
                  - ecs:*
                  - s3:*
                  - iam:PassRole
                Resource: '*'
  
  # --- CodeDeploy Application ---
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: ECS
      ApplicationName: joshi-codedeploy-app
  
  # --- CodeDeploy Deployment Group ---
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - CodeDeployApplication
      - joshiECSService
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: joshi-deployment-group
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      ECSService:
        ClusterName: !Ref joshiECSCluster
        ServiceName: !Ref joshiECSService
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !Ref joshiTargetGroup
            ProdTrafficRoute:
              ListenerArns:
                - !Ref joshiListener

  # --- CodeDeploy Role ---
    CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: joshi-codedeploy-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForECS



  
  # --- Add S3 Bucket for Artifacts ---
  JoshiCodePipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub joshi-codepipeline-artifacts-${AWS::AccountId}
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 90  # Optional: Clean up artifacts after 90 days
      Tags:
        - Key: Name
          Value: joshi-codepipeline-artifacts

  # --- CodePipeline ---
  joshiCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - joshiCodePipelineRole
      - joshiCodeBuildProject
      - joshiECSService
    Properties:
      RoleArn: !GetAtt joshiCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Sub joshi-codepipeline-artifacts-${AWS::AccountId}
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
        - Name: Approval
          Actions:
            - Name: ManualApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref joshiCodeBuildProject
        # - Name: Deploy
        #   Actions:
        #     - Name: Deploy
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Provider: ECS
        #         Version: '1'
        #       InputArtifacts:
        #         - Name: BuildArtifact
        #       Configuration:
        #         ClusterName: !Ref joshiECSCluster
        #         ServiceName: !Ref joshiECSService
        #         FileName: imagedefinitions.json
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: BuildArtifact
                AppSpecTemplateArtifact: BuildArtifact
                TaskDefinitionTemplatePath: imagedefinitions.json
                AppSpecTemplatePath: appspec.yaml


  # --- SNS Topic for CloudWatch Alarm ---
  AlarmSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: joshiTodoAppAlarmTopic

  # --- SNS Subscription ---
  AlarmSNSSubscription:
    Type: AWS::SNS::Subscription
    DependsOn:
      - AlarmSNS
    Properties:
      Protocol: email
      Endpoint: "joshiaman112@gmail.com"
      TopicArn: !Ref AlarmSNS

  # --- CloudWatch Alarm for Deployment Failures ---
  DeploymentFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - joshiCodePipeline
      - AlarmSNS
    Properties:
      AlarmName: joshiTodoAppDeploymentFailureAlarm
      AlarmDescription: Alarm for CodePipeline deployment failures
      Namespace: AWS/CodePipeline
      MetricName: PipelineExecutionFailed
      Dimensions:
        - Name: PipelineName
          Value: !Ref joshiCodePipeline
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref AlarmSNS
      TreatMissingData: notBreaching

Outputs:
  LoadBalancerURL:
    Description: URL of the Application Load Balancer
    Value: !Sub http://${joshiLoadBalancer.DNSName}